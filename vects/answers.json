[
 {
  "score": 1,
  "body": "\u003cp\u003eThe problem is that you are printing as result is matched.\u003c/p\u003e\n\u003cp\u003eYou can save the \u003ccode\u003e*goquery.Selection\u003c/code\u003e in a new slice and print only the last element. This example is working because you want the last occurrence, but in real life you must parse the query result for something in specific to not depend about result order.\u003c/p\u003e\n\u003cpre class=\"lang-golang prettyprint-override\"\u003e\u003ccode\u003e// type Selection struct {\n//  Nodes    []*html.Node\n//  document *Document\n//  prevSel  *Selection\n// }\n\nvar temp []*goquery.Selection\n\ntemp = append(temp, doc.Find(\u0026quot;.tplPagination\u0026quot;).Each(func(i int, s *goquery.Selection) {\n    s.Find(\u0026quot;a\u0026quot;)\n}))\n\nfmt.Printf(\u0026quot;last: %v\\n\u0026quot;, temp[len(temp)-1])\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre class=\"lang-bash prettyprint-override\"\u003e\u003ccode\u003etemp[len(temp)-1]: \u0026amp;{[0xc0002dcd90 0xc0002e0a80] 0xc00000e3f0 0xc000309770}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eNodes []*html.Node\u003c/code\u003e can be accessed with same example:\u003c/p\u003e\n\u003cpre class=\"lang-golang prettyprint-override\"\u003e\u003ccode\u003efmt.Printf(\u0026quot;last: %v\\n\u0026quot;, temp[len(temp)-1].Nodes)\n\u003c/code\u003e\u003c/pre\u003e\n"
 },
 {
  "body": "\u003cp\u003eAs per your comment you were looking to parse the page and get the number of pages and number of posts. Here is my attempt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epackage main\n\nimport (\n    \u0026quot;fmt\u0026quot;\n    \u0026quot;github.com/PuerkitoBio/goquery\u0026quot;\n    \u0026quot;log\u0026quot;\n    \u0026quot;math\u0026quot;\n    \u0026quot;net/http\u0026quot;\n    \u0026quot;strconv\u0026quot;\n    \u0026quot;strings\u0026quot;\n)\n\nfunc errCheck(err error) {\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nfunc ExampleScrape() {\n    url := \u0026quot;https://www.jobkorea.co.kr/Search/?stext=golang\u0026amp;tabType=recruit\u0026amp;Page_No=%s\u0026quot;\n    page := 3\n    fmt.Println(\u0026quot;Current page:\u0026quot;, page)\n\n    res, err := http.Get(fmt.Sprintf(url, page))\n    errCheck(err)\n\n    defer res.Body.Close()\n\n    if res.StatusCode != 200 {\n        log.Fatalf(\u0026quot;status code error: %d %s\u0026quot;, res.StatusCode, res.Status)\n    }\n\n    doc, err := goquery.NewDocumentFromReader(res.Body)\n    errCheck(err)\n\n    posts_div := doc.Find(\u0026quot;.recruit-info div.dev_list.lists-cnt\u0026quot;)\n    total_count_div := posts_div.Nodes[0]\n\n    var total_count int\n    for _, a := range total_count_div.Attr {\n        if a.Key == \u0026quot;total-count\u0026quot; {\n            total_count, err = strconv.Atoi(a.Val)\n            errCheck(err)\n            break\n        }\n    }\n    fmt.Println(\u0026quot;Total count:\u0026quot;, total_count)\n\n    titles := posts_div.Find(\u0026quot;.list-post .title\u0026quot;)\n    fmt.Println(\u0026quot;On this page:\u0026quot;, len(titles.Nodes))\n    fmt.Println(\u0026quot;Pages:\u0026quot;, math.Ceil(float64(total_count)/float64(len(titles.Nodes))))\n\n    fmt.Println(\u0026quot;\\nTitles on this page:\u0026quot;)\n    titles.Each(func(i int, s *goquery.Selection) {\n        fmt.Println(\u0026quot;\\t-\u0026quot;, strings.TrimSpace(s.Text()))\n    })\n}\n\nfunc main() {\n    ExampleScrape()\n}\n\u003c/code\u003e\u003c/pre\u003e\n"
 }
]